// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/merchant"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/order"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/product"
	"github.com/huoayi/business-center-ent-private/pkg/enum"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedBy sets the "created_by" field.
func (pc *ProductCreate) SetCreatedBy(i int64) *ProductCreate {
	pc.mutation.SetCreatedBy(i)
	return pc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedBy(i *int64) *ProductCreate {
	if i != nil {
		pc.SetCreatedBy(*i)
	}
	return pc
}

// SetUpdatedBy sets the "updated_by" field.
func (pc *ProductCreate) SetUpdatedBy(i int64) *ProductCreate {
	pc.mutation.SetUpdatedBy(i)
	return pc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedBy(i *int64) *ProductCreate {
	if i != nil {
		pc.SetUpdatedBy(*i)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProductCreate) SetCreatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableCreatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProductCreate) SetUpdatedAt(t time.Time) *ProductCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUpdatedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *ProductCreate) SetDeletedAt(t time.Time) *ProductCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pc *ProductCreate) SetNillableDeletedAt(t *time.Time) *ProductCreate {
	if t != nil {
		pc.SetDeletedAt(*t)
	}
	return pc
}

// SetProductName sets the "product_name" field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProductName(s *string) *ProductCreate {
	if s != nil {
		pc.SetProductName(*s)
	}
	return pc
}

// SetJpgURL sets the "jpg_url" field.
func (pc *ProductCreate) SetJpgURL(s string) *ProductCreate {
	pc.mutation.SetJpgURL(s)
	return pc
}

// SetNillableJpgURL sets the "jpg_url" field if the given value is not nil.
func (pc *ProductCreate) SetNillableJpgURL(s *string) *ProductCreate {
	if s != nil {
		pc.SetJpgURL(*s)
	}
	return pc
}

// SetComment sets the "comment" field.
func (pc *ProductCreate) SetComment(s string) *ProductCreate {
	pc.mutation.SetComment(s)
	return pc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pc *ProductCreate) SetNillableComment(s *string) *ProductCreate {
	if s != nil {
		pc.SetComment(*s)
	}
	return pc
}

// SetPrice sets the "price" field.
func (pc *ProductCreate) SetPrice(i int64) *ProductCreate {
	pc.mutation.SetPrice(i)
	return pc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pc *ProductCreate) SetNillablePrice(i *int64) *ProductCreate {
	if i != nil {
		pc.SetPrice(*i)
	}
	return pc
}

// SetUnit sets the "unit" field.
func (pc *ProductCreate) SetUnit(s string) *ProductCreate {
	pc.mutation.SetUnit(s)
	return pc
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (pc *ProductCreate) SetNillableUnit(s *string) *ProductCreate {
	if s != nil {
		pc.SetUnit(*s)
	}
	return pc
}

// SetBusinessID sets the "business_id" field.
func (pc *ProductCreate) SetBusinessID(i int64) *ProductCreate {
	pc.mutation.SetBusinessID(i)
	return pc
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableBusinessID(i *int64) *ProductCreate {
	if i != nil {
		pc.SetBusinessID(*i)
	}
	return pc
}

// SetProduceType sets the "produce_type" field.
func (pc *ProductCreate) SetProduceType(et enum.ProduceType) *ProductCreate {
	pc.mutation.SetProduceType(et)
	return pc
}

// SetNillableProduceType sets the "produce_type" field if the given value is not nil.
func (pc *ProductCreate) SetNillableProduceType(et *enum.ProduceType) *ProductCreate {
	if et != nil {
		pc.SetProduceType(*et)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProductCreate) SetID(i int64) *ProductCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProductCreate) SetNillableID(i *int64) *ProductCreate {
	if i != nil {
		pc.SetID(*i)
	}
	return pc
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (pc *ProductCreate) SetMerchantID(id int64) *ProductCreate {
	pc.mutation.SetMerchantID(id)
	return pc
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (pc *ProductCreate) SetMerchant(m *Merchant) *ProductCreate {
	return pc.SetMerchantID(m.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pc *ProductCreate) AddOrderIDs(ids ...int64) *ProductCreate {
	pc.mutation.AddOrderIDs(ids...)
	return pc
}

// AddOrders adds the "orders" edges to the Order entity.
func (pc *ProductCreate) AddOrders(o ...*Order) *ProductCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pc.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProductCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProductCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProductCreate) defaults() {
	if _, ok := pc.mutation.CreatedBy(); !ok {
		v := product.DefaultCreatedBy
		pc.mutation.SetCreatedBy(v)
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		v := product.DefaultUpdatedBy
		pc.mutation.SetUpdatedBy(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := product.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := product.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		v := product.DefaultDeletedAt
		pc.mutation.SetDeletedAt(v)
	}
	if _, ok := pc.mutation.ProductName(); !ok {
		v := product.DefaultProductName
		pc.mutation.SetProductName(v)
	}
	if _, ok := pc.mutation.JpgURL(); !ok {
		v := product.DefaultJpgURL
		pc.mutation.SetJpgURL(v)
	}
	if _, ok := pc.mutation.Comment(); !ok {
		v := product.DefaultComment
		pc.mutation.SetComment(v)
	}
	if _, ok := pc.mutation.Price(); !ok {
		v := product.DefaultPrice
		pc.mutation.SetPrice(v)
	}
	if _, ok := pc.mutation.Unit(); !ok {
		v := product.DefaultUnit
		pc.mutation.SetUnit(v)
	}
	if _, ok := pc.mutation.BusinessID(); !ok {
		v := product.DefaultBusinessID
		pc.mutation.SetBusinessID(v)
	}
	if _, ok := pc.mutation.ProduceType(); !ok {
		v := product.DefaultProduceType
		pc.mutation.SetProduceType(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := product.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProductCreate) check() error {
	if _, ok := pc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent_work: missing required field "Product.created_by"`)}
	}
	if _, ok := pc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent_work: missing required field "Product.updated_by"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent_work: missing required field "Product.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent_work: missing required field "Product.updated_at"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent_work: missing required field "Product.deleted_at"`)}
	}
	if _, ok := pc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`ent_work: missing required field "Product.product_name"`)}
	}
	if _, ok := pc.mutation.JpgURL(); !ok {
		return &ValidationError{Name: "jpg_url", err: errors.New(`ent_work: missing required field "Product.jpg_url"`)}
	}
	if _, ok := pc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent_work: missing required field "Product.comment"`)}
	}
	if _, ok := pc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent_work: missing required field "Product.price"`)}
	}
	if _, ok := pc.mutation.Unit(); !ok {
		return &ValidationError{Name: "unit", err: errors.New(`ent_work: missing required field "Product.unit"`)}
	}
	if _, ok := pc.mutation.BusinessID(); !ok {
		return &ValidationError{Name: "business_id", err: errors.New(`ent_work: missing required field "Product.business_id"`)}
	}
	if _, ok := pc.mutation.ProduceType(); !ok {
		return &ValidationError{Name: "produce_type", err: errors.New(`ent_work: missing required field "Product.produce_type"`)}
	}
	if v, ok := pc.mutation.ProduceType(); ok {
		if err := product.ProduceTypeValidator(v); err != nil {
			return &ValidationError{Name: "produce_type", err: fmt.Errorf(`ent_work: validator failed for field "Product.produce_type": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MerchantID(); !ok {
		return &ValidationError{Name: "merchant", err: errors.New(`ent_work: missing required edge "Product.merchant"`)}
	}
	return nil
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		_node = &Product{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(product.Table, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedBy(); ok {
		_spec.SetField(product.FieldCreatedBy, field.TypeInt64, value)
		_node.CreatedBy = value
	}
	if value, ok := pc.mutation.UpdatedBy(); ok {
		_spec.SetField(product.FieldUpdatedBy, field.TypeInt64, value)
		_node.UpdatedBy = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(product.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := pc.mutation.JpgURL(); ok {
		_spec.SetField(product.FieldJpgURL, field.TypeString, value)
		_node.JpgURL = value
	}
	if value, ok := pc.mutation.Comment(); ok {
		_spec.SetField(product.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := pc.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
		_node.Price = value
	}
	if value, ok := pc.mutation.Unit(); ok {
		_spec.SetField(product.FieldUnit, field.TypeString, value)
		_node.Unit = value
	}
	if value, ok := pc.mutation.ProduceType(); ok {
		_spec.SetField(product.FieldProduceType, field.TypeEnum, value)
		_node.ProduceType = value
	}
	if nodes := pc.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BusinessID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.Create().
//		SetCreatedBy(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pc *ProductCreate) OnConflict(opts ...sql.ConflictOption) *ProductUpsertOne {
	pc.conflict = opts
	return &ProductUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProductCreate) OnConflictColumns(columns ...string) *ProductUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertOne{
		create: pc,
	}
}

type (
	// ProductUpsertOne is the builder for "upsert"-ing
	//  one Product node.
	ProductUpsertOne struct {
		create *ProductCreate
	}

	// ProductUpsert is the "OnConflict" setter.
	ProductUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedBy sets the "created_by" field.
func (u *ProductUpsert) SetCreatedBy(v int64) *ProductUpsert {
	u.Set(product.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductUpsert) UpdateCreatedBy() *ProductUpsert {
	u.SetExcluded(product.FieldCreatedBy)
	return u
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductUpsert) AddCreatedBy(v int64) *ProductUpsert {
	u.Add(product.FieldCreatedBy, v)
	return u
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ProductUpsert) SetUpdatedBy(v int64) *ProductUpsert {
	u.Set(product.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedBy() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedBy)
	return u
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ProductUpsert) AddUpdatedBy(v int64) *ProductUpsert {
	u.Add(product.FieldUpdatedBy, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsert) SetUpdatedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUpdatedAt() *ProductUpsert {
	u.SetExcluded(product.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsert) SetDeletedAt(v time.Time) *ProductUpsert {
	u.Set(product.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsert) UpdateDeletedAt() *ProductUpsert {
	u.SetExcluded(product.FieldDeletedAt)
	return u
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsert) SetProductName(v string) *ProductUpsert {
	u.Set(product.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProductName() *ProductUpsert {
	u.SetExcluded(product.FieldProductName)
	return u
}

// SetJpgURL sets the "jpg_url" field.
func (u *ProductUpsert) SetJpgURL(v string) *ProductUpsert {
	u.Set(product.FieldJpgURL, v)
	return u
}

// UpdateJpgURL sets the "jpg_url" field to the value that was provided on create.
func (u *ProductUpsert) UpdateJpgURL() *ProductUpsert {
	u.SetExcluded(product.FieldJpgURL)
	return u
}

// SetComment sets the "comment" field.
func (u *ProductUpsert) SetComment(v string) *ProductUpsert {
	u.Set(product.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ProductUpsert) UpdateComment() *ProductUpsert {
	u.SetExcluded(product.FieldComment)
	return u
}

// SetPrice sets the "price" field.
func (u *ProductUpsert) SetPrice(v int64) *ProductUpsert {
	u.Set(product.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *ProductUpsert) UpdatePrice() *ProductUpsert {
	u.SetExcluded(product.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *ProductUpsert) AddPrice(v int64) *ProductUpsert {
	u.Add(product.FieldPrice, v)
	return u
}

// SetUnit sets the "unit" field.
func (u *ProductUpsert) SetUnit(v string) *ProductUpsert {
	u.Set(product.FieldUnit, v)
	return u
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ProductUpsert) UpdateUnit() *ProductUpsert {
	u.SetExcluded(product.FieldUnit)
	return u
}

// SetBusinessID sets the "business_id" field.
func (u *ProductUpsert) SetBusinessID(v int64) *ProductUpsert {
	u.Set(product.FieldBusinessID, v)
	return u
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *ProductUpsert) UpdateBusinessID() *ProductUpsert {
	u.SetExcluded(product.FieldBusinessID)
	return u
}

// SetProduceType sets the "produce_type" field.
func (u *ProductUpsert) SetProduceType(v enum.ProduceType) *ProductUpsert {
	u.Set(product.FieldProduceType, v)
	return u
}

// UpdateProduceType sets the "produce_type" field to the value that was provided on create.
func (u *ProductUpsert) UpdateProduceType() *ProductUpsert {
	u.SetExcluded(product.FieldProduceType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertOne) UpdateNewValues() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(product.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(product.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProductUpsertOne) Ignore() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertOne) DoNothing() *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreate.OnConflict
// documentation for more info.
func (u *ProductUpsertOne) Update(set func(*ProductUpsert)) *ProductUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductUpsertOne) SetCreatedBy(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductUpsertOne) AddCreatedBy(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateCreatedBy() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ProductUpsertOne) SetUpdatedBy(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ProductUpsertOne) AddUpdatedBy(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedBy() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertOne) SetUpdatedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUpdatedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsertOne) SetDeletedAt(v time.Time) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateDeletedAt() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsertOne) SetProductName(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProductName() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductName()
	})
}

// SetJpgURL sets the "jpg_url" field.
func (u *ProductUpsertOne) SetJpgURL(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetJpgURL(v)
	})
}

// UpdateJpgURL sets the "jpg_url" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateJpgURL() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateJpgURL()
	})
}

// SetComment sets the "comment" field.
func (u *ProductUpsertOne) SetComment(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateComment() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateComment()
	})
}

// SetPrice sets the "price" field.
func (u *ProductUpsertOne) SetPrice(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *ProductUpsertOne) AddPrice(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdatePrice() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePrice()
	})
}

// SetUnit sets the "unit" field.
func (u *ProductUpsertOne) SetUnit(v string) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateUnit() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnit()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *ProductUpsertOne) SetBusinessID(v int64) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateBusinessID() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBusinessID()
	})
}

// SetProduceType sets the "produce_type" field.
func (u *ProductUpsertOne) SetProduceType(v enum.ProduceType) *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.SetProduceType(v)
	})
}

// UpdateProduceType sets the "produce_type" field to the value that was provided on create.
func (u *ProductUpsertOne) UpdateProduceType() *ProductUpsertOne {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProduceType()
	})
}

// Exec executes the query.
func (u *ProductUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for ProductCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProductUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProductUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProductCreateBulk is the builder for creating many Product entities in bulk.
type ProductCreateBulk struct {
	config
	err      error
	builders []*ProductCreate
	conflict []sql.ConflictOption
}

// Save creates the Product entities in the database.
func (pcb *ProductCreateBulk) Save(ctx context.Context) ([]*Product, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Product, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProductCreateBulk) SaveX(ctx context.Context) []*Product {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProductCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProductCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Product.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProductUpsert) {
//			SetCreatedBy(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProductUpsertBulk {
	pcb.conflict = opts
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProductCreateBulk) OnConflictColumns(columns ...string) *ProductUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProductUpsertBulk{
		create: pcb,
	}
}

// ProductUpsertBulk is the builder for "upsert"-ing
// a bulk of Product nodes.
type ProductUpsertBulk struct {
	create *ProductCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(product.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ProductUpsertBulk) UpdateNewValues() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(product.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(product.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Product.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProductUpsertBulk) Ignore() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProductUpsertBulk) DoNothing() *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProductCreateBulk.OnConflict
// documentation for more info.
func (u *ProductUpsertBulk) Update(set func(*ProductUpsert)) *ProductUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProductUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedBy sets the "created_by" field.
func (u *ProductUpsertBulk) SetCreatedBy(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetCreatedBy(v)
	})
}

// AddCreatedBy adds v to the "created_by" field.
func (u *ProductUpsertBulk) AddCreatedBy(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "created_by" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateCreatedBy() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "updated_by" field.
func (u *ProductUpsertBulk) SetUpdatedBy(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedBy(v)
	})
}

// AddUpdatedBy adds v to the "updated_by" field.
func (u *ProductUpsertBulk) AddUpdatedBy(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "updated_by" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedBy() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ProductUpsertBulk) SetUpdatedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUpdatedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *ProductUpsertBulk) SetDeletedAt(v time.Time) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateDeletedAt() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetProductName sets the "product_name" field.
func (u *ProductUpsertBulk) SetProductName(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProductName() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProductName()
	})
}

// SetJpgURL sets the "jpg_url" field.
func (u *ProductUpsertBulk) SetJpgURL(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetJpgURL(v)
	})
}

// UpdateJpgURL sets the "jpg_url" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateJpgURL() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateJpgURL()
	})
}

// SetComment sets the "comment" field.
func (u *ProductUpsertBulk) SetComment(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateComment() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateComment()
	})
}

// SetPrice sets the "price" field.
func (u *ProductUpsertBulk) SetPrice(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *ProductUpsertBulk) AddPrice(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdatePrice() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdatePrice()
	})
}

// SetUnit sets the "unit" field.
func (u *ProductUpsertBulk) SetUnit(v string) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetUnit(v)
	})
}

// UpdateUnit sets the "unit" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateUnit() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateUnit()
	})
}

// SetBusinessID sets the "business_id" field.
func (u *ProductUpsertBulk) SetBusinessID(v int64) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetBusinessID(v)
	})
}

// UpdateBusinessID sets the "business_id" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateBusinessID() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateBusinessID()
	})
}

// SetProduceType sets the "produce_type" field.
func (u *ProductUpsertBulk) SetProduceType(v enum.ProduceType) *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.SetProduceType(v)
	})
}

// UpdateProduceType sets the "produce_type" field to the value that was provided on create.
func (u *ProductUpsertBulk) UpdateProduceType() *ProductUpsertBulk {
	return u.Update(func(s *ProductUpsert) {
		s.UpdateProduceType()
	})
}

// Exec executes the query.
func (u *ProductUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent_work: OnConflict was set for builder %d. Set it on the ProductCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent_work: missing options for ProductCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProductUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
