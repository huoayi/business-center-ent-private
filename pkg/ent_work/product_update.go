// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/merchant"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/order"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/predicate"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/product"
	"github.com/huoayi/business-center-ent-private/pkg/enum"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *ProductUpdate) SetCreatedBy(i int64) *ProductUpdate {
	pu.mutation.ResetCreatedBy()
	pu.mutation.SetCreatedBy(i)
	return pu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCreatedBy(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetCreatedBy(*i)
	}
	return pu
}

// AddCreatedBy adds i to the "created_by" field.
func (pu *ProductUpdate) AddCreatedBy(i int64) *ProductUpdate {
	pu.mutation.AddCreatedBy(i)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *ProductUpdate) SetUpdatedBy(i int64) *ProductUpdate {
	pu.mutation.ResetUpdatedBy()
	pu.mutation.SetUpdatedBy(i)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUpdatedBy(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetUpdatedBy(*i)
	}
	return pu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (pu *ProductUpdate) AddUpdatedBy(i int64) *ProductUpdate {
	pu.mutation.AddUpdatedBy(i)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProductUpdate) SetUpdatedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProductUpdate) SetDeletedAt(t time.Time) *ProductUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableDeletedAt(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// SetProductName sets the "product_name" field.
func (pu *ProductUpdate) SetProductName(s string) *ProductUpdate {
	pu.mutation.SetProductName(s)
	return pu
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductName(*s)
	}
	return pu
}

// SetJpgURL sets the "jpg_url" field.
func (pu *ProductUpdate) SetJpgURL(s string) *ProductUpdate {
	pu.mutation.SetJpgURL(s)
	return pu
}

// SetNillableJpgURL sets the "jpg_url" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableJpgURL(s *string) *ProductUpdate {
	if s != nil {
		pu.SetJpgURL(*s)
	}
	return pu
}

// SetComment sets the "comment" field.
func (pu *ProductUpdate) SetComment(s string) *ProductUpdate {
	pu.mutation.SetComment(s)
	return pu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableComment(s *string) *ProductUpdate {
	if s != nil {
		pu.SetComment(*s)
	}
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(i int64) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(i)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetPrice(*i)
	}
	return pu
}

// AddPrice adds i to the "price" field.
func (pu *ProductUpdate) AddPrice(i int64) *ProductUpdate {
	pu.mutation.AddPrice(i)
	return pu
}

// SetUnit sets the "unit" field.
func (pu *ProductUpdate) SetUnit(s string) *ProductUpdate {
	pu.mutation.SetUnit(s)
	return pu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableUnit(s *string) *ProductUpdate {
	if s != nil {
		pu.SetUnit(*s)
	}
	return pu
}

// SetBusinessID sets the "business_id" field.
func (pu *ProductUpdate) SetBusinessID(i int64) *ProductUpdate {
	pu.mutation.SetBusinessID(i)
	return pu
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableBusinessID(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetBusinessID(*i)
	}
	return pu
}

// SetProduceType sets the "produce_type" field.
func (pu *ProductUpdate) SetProduceType(et enum.ProduceType) *ProductUpdate {
	pu.mutation.SetProduceType(et)
	return pu
}

// SetNillableProduceType sets the "produce_type" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProduceType(et *enum.ProduceType) *ProductUpdate {
	if et != nil {
		pu.SetProduceType(*et)
	}
	return pu
}

// SetCount sets the "count" field.
func (pu *ProductUpdate) SetCount(i int64) *ProductUpdate {
	pu.mutation.ResetCount()
	pu.mutation.SetCount(i)
	return pu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableCount(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetCount(*i)
	}
	return pu
}

// AddCount adds i to the "count" field.
func (pu *ProductUpdate) AddCount(i int64) *ProductUpdate {
	pu.mutation.AddCount(i)
	return pu
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (pu *ProductUpdate) SetMerchantID(id int64) *ProductUpdate {
	pu.mutation.SetMerchantID(id)
	return pu
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (pu *ProductUpdate) SetMerchant(m *Merchant) *ProductUpdate {
	return pu.SetMerchantID(m.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (pu *ProductUpdate) AddOrderIDs(ids ...int64) *ProductUpdate {
	pu.mutation.AddOrderIDs(ids...)
	return pu
}

// AddOrders adds the "orders" edges to the Order entity.
func (pu *ProductUpdate) AddOrders(o ...*Order) *ProductUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (pu *ProductUpdate) ClearMerchant() *ProductUpdate {
	pu.mutation.ClearMerchant()
	return pu
}

// ClearOrders clears all "orders" edges to the Order entity.
func (pu *ProductUpdate) ClearOrders() *ProductUpdate {
	pu.mutation.ClearOrders()
	return pu
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (pu *ProductUpdate) RemoveOrderIDs(ids ...int64) *ProductUpdate {
	pu.mutation.RemoveOrderIDs(ids...)
	return pu
}

// RemoveOrders removes "orders" edges to Order entities.
func (pu *ProductUpdate) RemoveOrders(o ...*Order) *ProductUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return pu.RemoveOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.ProduceType(); ok {
		if err := product.ProduceTypeValidator(v); err != nil {
			return &ValidationError{Name: "produce_type", err: fmt.Errorf(`ent_work: validator failed for field "Product.produce_type": %w`, err)}
		}
	}
	if _, ok := pu.mutation.MerchantID(); pu.mutation.MerchantCleared() && !ok {
		return errors.New(`ent_work: clearing a required unique edge "Product.merchant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProductUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(product.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(product.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := pu.mutation.JpgURL(); ok {
		_spec.SetField(product.FieldJpgURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.Comment(); ok {
		_spec.SetField(product.FieldComment, field.TypeString, value)
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.Unit(); ok {
		_spec.SetField(product.FieldUnit, field.TypeString, value)
	}
	if value, ok := pu.mutation.ProduceType(); ok {
		_spec.SetField(product.FieldProduceType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Count(); ok {
		_spec.SetField(product.FieldCount, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCount(); ok {
		_spec.AddField(product.FieldCount, field.TypeInt64, value)
	}
	if pu.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !pu.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProductMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (puo *ProductUpdateOne) SetCreatedBy(i int64) *ProductUpdateOne {
	puo.mutation.ResetCreatedBy()
	puo.mutation.SetCreatedBy(i)
	return puo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCreatedBy(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetCreatedBy(*i)
	}
	return puo
}

// AddCreatedBy adds i to the "created_by" field.
func (puo *ProductUpdateOne) AddCreatedBy(i int64) *ProductUpdateOne {
	puo.mutation.AddCreatedBy(i)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *ProductUpdateOne) SetUpdatedBy(i int64) *ProductUpdateOne {
	puo.mutation.ResetUpdatedBy()
	puo.mutation.SetUpdatedBy(i)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUpdatedBy(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetUpdatedBy(*i)
	}
	return puo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (puo *ProductUpdateOne) AddUpdatedBy(i int64) *ProductUpdateOne {
	puo.mutation.AddUpdatedBy(i)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProductUpdateOne) SetUpdatedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProductUpdateOne) SetDeletedAt(t time.Time) *ProductUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableDeletedAt(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// SetProductName sets the "product_name" field.
func (puo *ProductUpdateOne) SetProductName(s string) *ProductUpdateOne {
	puo.mutation.SetProductName(s)
	return puo
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductName(*s)
	}
	return puo
}

// SetJpgURL sets the "jpg_url" field.
func (puo *ProductUpdateOne) SetJpgURL(s string) *ProductUpdateOne {
	puo.mutation.SetJpgURL(s)
	return puo
}

// SetNillableJpgURL sets the "jpg_url" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableJpgURL(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetJpgURL(*s)
	}
	return puo
}

// SetComment sets the "comment" field.
func (puo *ProductUpdateOne) SetComment(s string) *ProductUpdateOne {
	puo.mutation.SetComment(s)
	return puo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableComment(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetComment(*s)
	}
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(i int64) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(i)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetPrice(*i)
	}
	return puo
}

// AddPrice adds i to the "price" field.
func (puo *ProductUpdateOne) AddPrice(i int64) *ProductUpdateOne {
	puo.mutation.AddPrice(i)
	return puo
}

// SetUnit sets the "unit" field.
func (puo *ProductUpdateOne) SetUnit(s string) *ProductUpdateOne {
	puo.mutation.SetUnit(s)
	return puo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableUnit(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetUnit(*s)
	}
	return puo
}

// SetBusinessID sets the "business_id" field.
func (puo *ProductUpdateOne) SetBusinessID(i int64) *ProductUpdateOne {
	puo.mutation.SetBusinessID(i)
	return puo
}

// SetNillableBusinessID sets the "business_id" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableBusinessID(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetBusinessID(*i)
	}
	return puo
}

// SetProduceType sets the "produce_type" field.
func (puo *ProductUpdateOne) SetProduceType(et enum.ProduceType) *ProductUpdateOne {
	puo.mutation.SetProduceType(et)
	return puo
}

// SetNillableProduceType sets the "produce_type" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProduceType(et *enum.ProduceType) *ProductUpdateOne {
	if et != nil {
		puo.SetProduceType(*et)
	}
	return puo
}

// SetCount sets the "count" field.
func (puo *ProductUpdateOne) SetCount(i int64) *ProductUpdateOne {
	puo.mutation.ResetCount()
	puo.mutation.SetCount(i)
	return puo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableCount(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetCount(*i)
	}
	return puo
}

// AddCount adds i to the "count" field.
func (puo *ProductUpdateOne) AddCount(i int64) *ProductUpdateOne {
	puo.mutation.AddCount(i)
	return puo
}

// SetMerchantID sets the "merchant" edge to the Merchant entity by ID.
func (puo *ProductUpdateOne) SetMerchantID(id int64) *ProductUpdateOne {
	puo.mutation.SetMerchantID(id)
	return puo
}

// SetMerchant sets the "merchant" edge to the Merchant entity.
func (puo *ProductUpdateOne) SetMerchant(m *Merchant) *ProductUpdateOne {
	return puo.SetMerchantID(m.ID)
}

// AddOrderIDs adds the "orders" edge to the Order entity by IDs.
func (puo *ProductUpdateOne) AddOrderIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.AddOrderIDs(ids...)
	return puo
}

// AddOrders adds the "orders" edges to the Order entity.
func (puo *ProductUpdateOne) AddOrders(o ...*Order) *ProductUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.AddOrderIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// ClearMerchant clears the "merchant" edge to the Merchant entity.
func (puo *ProductUpdateOne) ClearMerchant() *ProductUpdateOne {
	puo.mutation.ClearMerchant()
	return puo
}

// ClearOrders clears all "orders" edges to the Order entity.
func (puo *ProductUpdateOne) ClearOrders() *ProductUpdateOne {
	puo.mutation.ClearOrders()
	return puo
}

// RemoveOrderIDs removes the "orders" edge to Order entities by IDs.
func (puo *ProductUpdateOne) RemoveOrderIDs(ids ...int64) *ProductUpdateOne {
	puo.mutation.RemoveOrderIDs(ids...)
	return puo
}

// RemoveOrders removes "orders" edges to Order entities.
func (puo *ProductUpdateOne) RemoveOrders(o ...*Order) *ProductUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return puo.RemoveOrderIDs(ids...)
}

// Where appends a list predicates to the ProductUpdate builder.
func (puo *ProductUpdateOne) Where(ps ...predicate.Product) *ProductUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := product.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.ProduceType(); ok {
		if err := product.ProduceTypeValidator(v); err != nil {
			return &ValidationError{Name: "produce_type", err: fmt.Errorf(`ent_work: validator failed for field "Product.produce_type": %w`, err)}
		}
	}
	if _, ok := puo.mutation.MerchantID(); puo.mutation.MerchantCleared() && !ok {
		return errors.New(`ent_work: clearing a required unique edge "Product.merchant"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProductUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProductUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(product.Table, product.Columns, sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent_work: missing "Product.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent_work: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(product.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(product.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(product.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(product.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(product.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ProductName(); ok {
		_spec.SetField(product.FieldProductName, field.TypeString, value)
	}
	if value, ok := puo.mutation.JpgURL(); ok {
		_spec.SetField(product.FieldJpgURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.Comment(); ok {
		_spec.SetField(product.FieldComment, field.TypeString, value)
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.SetField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.AddField(product.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.Unit(); ok {
		_spec.SetField(product.FieldUnit, field.TypeString, value)
	}
	if value, ok := puo.mutation.ProduceType(); ok {
		_spec.SetField(product.FieldProduceType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Count(); ok {
		_spec.SetField(product.FieldCount, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCount(); ok {
		_spec.AddField(product.FieldCount, field.TypeInt64, value)
	}
	if puo.mutation.MerchantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MerchantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   product.MerchantTable,
			Columns: []string{product.MerchantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOrdersIDs(); len(nodes) > 0 && !puo.mutation.OrdersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OrdersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.OrdersTable,
			Columns: []string{product.OrdersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
