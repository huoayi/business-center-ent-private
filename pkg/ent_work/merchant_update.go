// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/merchant"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/predicate"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/product"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/user"
	"github.com/huoayi/business-center-ent-private/pkg/enum"
)

// MerchantUpdate is the builder for updating Merchant entities.
type MerchantUpdate struct {
	config
	hooks     []Hook
	mutation  *MerchantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MerchantUpdate builder.
func (mu *MerchantUpdate) Where(ps ...predicate.Merchant) *MerchantUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedBy sets the "created_by" field.
func (mu *MerchantUpdate) SetCreatedBy(i int64) *MerchantUpdate {
	mu.mutation.ResetCreatedBy()
	mu.mutation.SetCreatedBy(i)
	return mu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableCreatedBy(i *int64) *MerchantUpdate {
	if i != nil {
		mu.SetCreatedBy(*i)
	}
	return mu
}

// AddCreatedBy adds i to the "created_by" field.
func (mu *MerchantUpdate) AddCreatedBy(i int64) *MerchantUpdate {
	mu.mutation.AddCreatedBy(i)
	return mu
}

// SetUpdatedBy sets the "updated_by" field.
func (mu *MerchantUpdate) SetUpdatedBy(i int64) *MerchantUpdate {
	mu.mutation.ResetUpdatedBy()
	mu.mutation.SetUpdatedBy(i)
	return mu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableUpdatedBy(i *int64) *MerchantUpdate {
	if i != nil {
		mu.SetUpdatedBy(*i)
	}
	return mu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (mu *MerchantUpdate) AddUpdatedBy(i int64) *MerchantUpdate {
	mu.mutation.AddUpdatedBy(i)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MerchantUpdate) SetUpdatedAt(t time.Time) *MerchantUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MerchantUpdate) SetDeletedAt(t time.Time) *MerchantUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableDeletedAt(t *time.Time) *MerchantUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// SetMerchantName sets the "merchant_name" field.
func (mu *MerchantUpdate) SetMerchantName(s string) *MerchantUpdate {
	mu.mutation.SetMerchantName(s)
	return mu
}

// SetNillableMerchantName sets the "merchant_name" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableMerchantName(s *string) *MerchantUpdate {
	if s != nil {
		mu.SetMerchantName(*s)
	}
	return mu
}

// SetJpgURL sets the "jpg_url" field.
func (mu *MerchantUpdate) SetJpgURL(s string) *MerchantUpdate {
	mu.mutation.SetJpgURL(s)
	return mu
}

// SetNillableJpgURL sets the "jpg_url" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableJpgURL(s *string) *MerchantUpdate {
	if s != nil {
		mu.SetJpgURL(*s)
	}
	return mu
}

// SetComment sets the "comment" field.
func (mu *MerchantUpdate) SetComment(s string) *MerchantUpdate {
	mu.mutation.SetComment(s)
	return mu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableComment(s *string) *MerchantUpdate {
	if s != nil {
		mu.SetComment(*s)
	}
	return mu
}

// SetAmount sets the "amount" field.
func (mu *MerchantUpdate) SetAmount(i int) *MerchantUpdate {
	mu.mutation.ResetAmount()
	mu.mutation.SetAmount(i)
	return mu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableAmount(i *int) *MerchantUpdate {
	if i != nil {
		mu.SetAmount(*i)
	}
	return mu
}

// AddAmount adds i to the "amount" field.
func (mu *MerchantUpdate) AddAmount(i int) *MerchantUpdate {
	mu.mutation.AddAmount(i)
	return mu
}

// SetUserID sets the "user_id" field.
func (mu *MerchantUpdate) SetUserID(i int64) *MerchantUpdate {
	mu.mutation.SetUserID(i)
	return mu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableUserID(i *int64) *MerchantUpdate {
	if i != nil {
		mu.SetUserID(*i)
	}
	return mu
}

// SetProvence sets the "provence" field.
func (mu *MerchantUpdate) SetProvence(e enum.Provence) *MerchantUpdate {
	mu.mutation.SetProvence(e)
	return mu
}

// SetNillableProvence sets the "provence" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillableProvence(e *enum.Provence) *MerchantUpdate {
	if e != nil {
		mu.SetProvence(*e)
	}
	return mu
}

// SetPayURL sets the "pay_url" field.
func (mu *MerchantUpdate) SetPayURL(s string) *MerchantUpdate {
	mu.mutation.SetPayURL(s)
	return mu
}

// SetNillablePayURL sets the "pay_url" field if the given value is not nil.
func (mu *MerchantUpdate) SetNillablePayURL(s *string) *MerchantUpdate {
	if s != nil {
		mu.SetPayURL(*s)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MerchantUpdate) SetUser(u *User) *MerchantUpdate {
	return mu.SetUserID(u.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (mu *MerchantUpdate) AddProductIDs(ids ...int64) *MerchantUpdate {
	mu.mutation.AddProductIDs(ids...)
	return mu
}

// AddProducts adds the "products" edges to the Product entity.
func (mu *MerchantUpdate) AddProducts(p ...*Product) *MerchantUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.AddProductIDs(ids...)
}

// Mutation returns the MerchantMutation object of the builder.
func (mu *MerchantUpdate) Mutation() *MerchantMutation {
	return mu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MerchantUpdate) ClearUser() *MerchantUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearProducts clears all "products" edges to the Product entity.
func (mu *MerchantUpdate) ClearProducts() *MerchantUpdate {
	mu.mutation.ClearProducts()
	return mu
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (mu *MerchantUpdate) RemoveProductIDs(ids ...int64) *MerchantUpdate {
	mu.mutation.RemoveProductIDs(ids...)
	return mu
}

// RemoveProducts removes "products" edges to Product entities.
func (mu *MerchantUpdate) RemoveProducts(p ...*Product) *MerchantUpdate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MerchantUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MerchantUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MerchantUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MerchantUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MerchantUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := merchant.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MerchantUpdate) check() error {
	if v, ok := mu.mutation.Provence(); ok {
		if err := merchant.ProvenceValidator(v); err != nil {
			return &ValidationError{Name: "provence", err: fmt.Errorf(`ent_work: validator failed for field "Merchant.provence": %w`, err)}
		}
	}
	if _, ok := mu.mutation.UserID(); mu.mutation.UserCleared() && !ok {
		return errors.New(`ent_work: clearing a required unique edge "Merchant.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MerchantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MerchantUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MerchantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(merchant.Table, merchant.Columns, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedBy(); ok {
		_spec.SetField(merchant.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(merchant.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedBy(); ok {
		_spec.SetField(merchant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(merchant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(merchant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(merchant.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.MerchantName(); ok {
		_spec.SetField(merchant.FieldMerchantName, field.TypeString, value)
	}
	if value, ok := mu.mutation.JpgURL(); ok {
		_spec.SetField(merchant.FieldJpgURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.Comment(); ok {
		_spec.SetField(merchant.FieldComment, field.TypeString, value)
	}
	if value, ok := mu.mutation.Amount(); ok {
		_spec.SetField(merchant.FieldAmount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedAmount(); ok {
		_spec.AddField(merchant.FieldAmount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Provence(); ok {
		_spec.SetField(merchant.FieldProvence, field.TypeEnum, value)
	}
	if value, ok := mu.mutation.PayURL(); ok {
		_spec.SetField(merchant.FieldPayURL, field.TypeString, value)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchant.UserTable,
			Columns: []string{merchant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchant.UserTable,
			Columns: []string{merchant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !mu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MerchantUpdateOne is the builder for updating a single Merchant entity.
type MerchantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MerchantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedBy sets the "created_by" field.
func (muo *MerchantUpdateOne) SetCreatedBy(i int64) *MerchantUpdateOne {
	muo.mutation.ResetCreatedBy()
	muo.mutation.SetCreatedBy(i)
	return muo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableCreatedBy(i *int64) *MerchantUpdateOne {
	if i != nil {
		muo.SetCreatedBy(*i)
	}
	return muo
}

// AddCreatedBy adds i to the "created_by" field.
func (muo *MerchantUpdateOne) AddCreatedBy(i int64) *MerchantUpdateOne {
	muo.mutation.AddCreatedBy(i)
	return muo
}

// SetUpdatedBy sets the "updated_by" field.
func (muo *MerchantUpdateOne) SetUpdatedBy(i int64) *MerchantUpdateOne {
	muo.mutation.ResetUpdatedBy()
	muo.mutation.SetUpdatedBy(i)
	return muo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableUpdatedBy(i *int64) *MerchantUpdateOne {
	if i != nil {
		muo.SetUpdatedBy(*i)
	}
	return muo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (muo *MerchantUpdateOne) AddUpdatedBy(i int64) *MerchantUpdateOne {
	muo.mutation.AddUpdatedBy(i)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MerchantUpdateOne) SetUpdatedAt(t time.Time) *MerchantUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MerchantUpdateOne) SetDeletedAt(t time.Time) *MerchantUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableDeletedAt(t *time.Time) *MerchantUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// SetMerchantName sets the "merchant_name" field.
func (muo *MerchantUpdateOne) SetMerchantName(s string) *MerchantUpdateOne {
	muo.mutation.SetMerchantName(s)
	return muo
}

// SetNillableMerchantName sets the "merchant_name" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableMerchantName(s *string) *MerchantUpdateOne {
	if s != nil {
		muo.SetMerchantName(*s)
	}
	return muo
}

// SetJpgURL sets the "jpg_url" field.
func (muo *MerchantUpdateOne) SetJpgURL(s string) *MerchantUpdateOne {
	muo.mutation.SetJpgURL(s)
	return muo
}

// SetNillableJpgURL sets the "jpg_url" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableJpgURL(s *string) *MerchantUpdateOne {
	if s != nil {
		muo.SetJpgURL(*s)
	}
	return muo
}

// SetComment sets the "comment" field.
func (muo *MerchantUpdateOne) SetComment(s string) *MerchantUpdateOne {
	muo.mutation.SetComment(s)
	return muo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableComment(s *string) *MerchantUpdateOne {
	if s != nil {
		muo.SetComment(*s)
	}
	return muo
}

// SetAmount sets the "amount" field.
func (muo *MerchantUpdateOne) SetAmount(i int) *MerchantUpdateOne {
	muo.mutation.ResetAmount()
	muo.mutation.SetAmount(i)
	return muo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableAmount(i *int) *MerchantUpdateOne {
	if i != nil {
		muo.SetAmount(*i)
	}
	return muo
}

// AddAmount adds i to the "amount" field.
func (muo *MerchantUpdateOne) AddAmount(i int) *MerchantUpdateOne {
	muo.mutation.AddAmount(i)
	return muo
}

// SetUserID sets the "user_id" field.
func (muo *MerchantUpdateOne) SetUserID(i int64) *MerchantUpdateOne {
	muo.mutation.SetUserID(i)
	return muo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableUserID(i *int64) *MerchantUpdateOne {
	if i != nil {
		muo.SetUserID(*i)
	}
	return muo
}

// SetProvence sets the "provence" field.
func (muo *MerchantUpdateOne) SetProvence(e enum.Provence) *MerchantUpdateOne {
	muo.mutation.SetProvence(e)
	return muo
}

// SetNillableProvence sets the "provence" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillableProvence(e *enum.Provence) *MerchantUpdateOne {
	if e != nil {
		muo.SetProvence(*e)
	}
	return muo
}

// SetPayURL sets the "pay_url" field.
func (muo *MerchantUpdateOne) SetPayURL(s string) *MerchantUpdateOne {
	muo.mutation.SetPayURL(s)
	return muo
}

// SetNillablePayURL sets the "pay_url" field if the given value is not nil.
func (muo *MerchantUpdateOne) SetNillablePayURL(s *string) *MerchantUpdateOne {
	if s != nil {
		muo.SetPayURL(*s)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MerchantUpdateOne) SetUser(u *User) *MerchantUpdateOne {
	return muo.SetUserID(u.ID)
}

// AddProductIDs adds the "products" edge to the Product entity by IDs.
func (muo *MerchantUpdateOne) AddProductIDs(ids ...int64) *MerchantUpdateOne {
	muo.mutation.AddProductIDs(ids...)
	return muo
}

// AddProducts adds the "products" edges to the Product entity.
func (muo *MerchantUpdateOne) AddProducts(p ...*Product) *MerchantUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.AddProductIDs(ids...)
}

// Mutation returns the MerchantMutation object of the builder.
func (muo *MerchantUpdateOne) Mutation() *MerchantMutation {
	return muo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MerchantUpdateOne) ClearUser() *MerchantUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearProducts clears all "products" edges to the Product entity.
func (muo *MerchantUpdateOne) ClearProducts() *MerchantUpdateOne {
	muo.mutation.ClearProducts()
	return muo
}

// RemoveProductIDs removes the "products" edge to Product entities by IDs.
func (muo *MerchantUpdateOne) RemoveProductIDs(ids ...int64) *MerchantUpdateOne {
	muo.mutation.RemoveProductIDs(ids...)
	return muo
}

// RemoveProducts removes "products" edges to Product entities.
func (muo *MerchantUpdateOne) RemoveProducts(p ...*Product) *MerchantUpdateOne {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return muo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the MerchantUpdate builder.
func (muo *MerchantUpdateOne) Where(ps ...predicate.Merchant) *MerchantUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MerchantUpdateOne) Select(field string, fields ...string) *MerchantUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Merchant entity.
func (muo *MerchantUpdateOne) Save(ctx context.Context) (*Merchant, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MerchantUpdateOne) SaveX(ctx context.Context) *Merchant {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MerchantUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MerchantUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MerchantUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := merchant.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MerchantUpdateOne) check() error {
	if v, ok := muo.mutation.Provence(); ok {
		if err := merchant.ProvenceValidator(v); err != nil {
			return &ValidationError{Name: "provence", err: fmt.Errorf(`ent_work: validator failed for field "Merchant.provence": %w`, err)}
		}
	}
	if _, ok := muo.mutation.UserID(); muo.mutation.UserCleared() && !ok {
		return errors.New(`ent_work: clearing a required unique edge "Merchant.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MerchantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MerchantUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MerchantUpdateOne) sqlSave(ctx context.Context) (_node *Merchant, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(merchant.Table, merchant.Columns, sqlgraph.NewFieldSpec(merchant.FieldID, field.TypeInt64))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent_work: missing "Merchant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, merchant.FieldID)
		for _, f := range fields {
			if !merchant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent_work: invalid field %q for query", f)}
			}
			if f != merchant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedBy(); ok {
		_spec.SetField(merchant.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(merchant.FieldCreatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedBy(); ok {
		_spec.SetField(merchant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedUpdatedBy(); ok {
		_spec.AddField(merchant.FieldUpdatedBy, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(merchant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(merchant.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.MerchantName(); ok {
		_spec.SetField(merchant.FieldMerchantName, field.TypeString, value)
	}
	if value, ok := muo.mutation.JpgURL(); ok {
		_spec.SetField(merchant.FieldJpgURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.Comment(); ok {
		_spec.SetField(merchant.FieldComment, field.TypeString, value)
	}
	if value, ok := muo.mutation.Amount(); ok {
		_spec.SetField(merchant.FieldAmount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedAmount(); ok {
		_spec.AddField(merchant.FieldAmount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Provence(); ok {
		_spec.SetField(merchant.FieldProvence, field.TypeEnum, value)
	}
	if value, ok := muo.mutation.PayURL(); ok {
		_spec.SetField(merchant.FieldPayURL, field.TypeString, value)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchant.UserTable,
			Columns: []string{merchant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   merchant.UserTable,
			Columns: []string{merchant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !muo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   merchant.ProductsTable,
			Columns: []string{merchant.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(product.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Merchant{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{merchant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
