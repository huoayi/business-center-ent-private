// Code generated by ent, DO NOT EDIT.

package ent_work

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/merchant"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/product"
	"github.com/huoayi/business-center-ent-private/pkg/ent_work/user"
	"github.com/huoayi/business-center-ent-private/pkg/enum"
)

// Merchant is the model entity for the Merchant schema.
type Merchant struct {
	config `json:"-"`
	// ID of the ent.
	// 19 位雪花 ID
	ID int64 `json:"id,string"`
	// 创建者 ID
	CreatedBy int64 `json:"created_by"`
	// 更新者 ID
	UpdatedBy int64 `json:"updated_by"`
	// 创建时刻，带时区
	CreatedAt time.Time `json:"created_at"`
	// 更新时刻，带时区
	UpdatedAt time.Time `json:"updated_at"`
	// 软删除时刻，带时区
	DeletedAt time.Time `json:"deleted_at"`
	// 商户姓名
	MerchantName string `json:"merchant_name"`
	// 商户头像
	JpgURL string `json:"jpg_url"`
	// 商户介绍
	Comment string `json:"comment"`
	// 上架商品总数
	Amount int `json:"amount,omitempty"`
	// 外键用户 id
	UserID int64 `json:"user_id,string"`
	// 省份
	Provence enum.Provence `json:"provence"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MerchantQuery when eager-loading is set.
	Edges        MerchantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MerchantEdges holds the relations/edges for other nodes in the graph.
type MerchantEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Products holds the value of the products edge.
	Products *Product `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MerchantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MerchantEdges) ProductsOrErr() (*Product, error) {
	if e.Products != nil {
		return e.Products, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: product.Label}
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Merchant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case merchant.FieldID, merchant.FieldCreatedBy, merchant.FieldUpdatedBy, merchant.FieldAmount, merchant.FieldUserID:
			values[i] = new(sql.NullInt64)
		case merchant.FieldMerchantName, merchant.FieldJpgURL, merchant.FieldComment, merchant.FieldProvence:
			values[i] = new(sql.NullString)
		case merchant.FieldCreatedAt, merchant.FieldUpdatedAt, merchant.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Merchant fields.
func (m *Merchant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case merchant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int64(value.Int64)
		case merchant.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				m.CreatedBy = value.Int64
			}
		case merchant.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				m.UpdatedBy = value.Int64
			}
		case merchant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case merchant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case merchant.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = value.Time
			}
		case merchant.FieldMerchantName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field merchant_name", values[i])
			} else if value.Valid {
				m.MerchantName = value.String
			}
		case merchant.FieldJpgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field jpg_url", values[i])
			} else if value.Valid {
				m.JpgURL = value.String
			}
		case merchant.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				m.Comment = value.String
			}
		case merchant.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				m.Amount = int(value.Int64)
			}
		case merchant.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				m.UserID = value.Int64
			}
		case merchant.FieldProvence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provence", values[i])
			} else if value.Valid {
				m.Provence = enum.Provence(value.String)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Merchant.
// This includes values selected through modifiers, order, etc.
func (m *Merchant) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Merchant entity.
func (m *Merchant) QueryUser() *UserQuery {
	return NewMerchantClient(m.config).QueryUser(m)
}

// QueryProducts queries the "products" edge of the Merchant entity.
func (m *Merchant) QueryProducts() *ProductQuery {
	return NewMerchantClient(m.config).QueryProducts(m)
}

// Update returns a builder for updating this Merchant.
// Note that you need to call Merchant.Unwrap() before calling this method if this Merchant
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Merchant) Update() *MerchantUpdateOne {
	return NewMerchantClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Merchant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Merchant) Unwrap() *Merchant {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent_work: Merchant is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Merchant) String() string {
	var builder strings.Builder
	builder.WriteString("Merchant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("merchant_name=")
	builder.WriteString(m.MerchantName)
	builder.WriteString(", ")
	builder.WriteString("jpg_url=")
	builder.WriteString(m.JpgURL)
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(m.Comment)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", m.Amount))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", m.UserID))
	builder.WriteString(", ")
	builder.WriteString("provence=")
	builder.WriteString(fmt.Sprintf("%v", m.Provence))
	builder.WriteByte(')')
	return builder.String()
}

// Merchants is a parsable slice of Merchant.
type Merchants []*Merchant
